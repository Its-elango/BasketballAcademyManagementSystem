@model IEnumerable<BasketballAcademy.Models.Admission>

@{
    ViewBag.Title = "ViewPlayer";
    Layout = "~/Views/Shared/AdminLayoutPage.cshtml";
}

<script src="~/Scripts/PreventBack.js"></script>

<h2 class="text-center my-3">Admission list</h2>
<table class="table table-bordered table-responsive table-striped-columns">
    <tr class="text-center">
        
        <th> Name</th>
        <th>Date of birth</th>
        <th>Age</th>
        @*<th>Gender</th>*@
        <th>Number</th>
        <th>Email</th>
        <th>Months</th>
        <th>Coach</th>
        <th>Parent/Guardian name</th>
        <th>Parent/Guardian phone</th>
        <th>Payment</th>
        <th>Status</th>
    </tr>


    @foreach (var item in Model)
    {
        <tr class="text-center">
           
            <td>
                @Html.DisplayFor(modelItem => item.FullName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateOfBirth)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            @*<td>
                @Html.DisplayFor(modelItem => item.Gender)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ChooseMonths)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Coach)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParentGuardianName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParentGuardianPhone)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Payment)
            </td>
            <td>
                @{
                    var statusList = new List<SelectListItem>
                        {
            new SelectListItem { Text = "Waiting", Value = "0", Selected = (item.status == 0) },
            new SelectListItem { Text = "Confirm", Value = "1", Selected = (item.status == 1) },
            new SelectListItem { Text = "Rejected", Value = "2", Selected = (item.status == 2) }
        };
                }

                @Html.DropDownListFor(modelItem => item.status, statusList, new { @class = "status-dropdown " })

                <input type="hidden" class="itemId" value="@item.Id" />
            </td>
        </tr>
    }

</table>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
$(document).ready(function () {
    $('.status-dropdown').change(function () {
        var itemId = $(this).siblings('.itemId').val(); // Get the itemId from the hidden input in the same row
        var newStatus = $(this).val();

        $.ajax({
            url: '@Url.Action("UpdateStatus", "Admission")',
            type: 'POST',
            data: { itemId: itemId, status: newStatus },
            success: function (result) { //This callback function , It handles the server's response.
                if (result.success) {
                    // Update was successful, you can provide feedback to the user here
                    console.log(result.message);
                } else {
                    // Handle the case where the update failed
                    console.error(result.message);
                }
            },
            error: function (xhr, status, error) {
                // Handle AJAX errors here
                console.error(error);
            }
        });
    });

    // Add an onclick method to the dropdown items
    $('.status-dropdown option').click(function () {
        // You can perform actions here when a dropdown item is clicked
        var selectedValue = $(this).val();
        console.log('Dropdown item clicked with value: ' + selectedValue);
    });
});
</script>
<script src="~/Content/AJAX.js"></script>